// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transformModuleWithAcorn NO debería transformar imports de librerías externas como "vue" 1`] = `
"let ref;
let computed;
let localUtil;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        ({ ref, computed } = await importWithTimestamp('vue'));
        ({ localUtil } = await importWithTimestamp('./local.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['vue'] = async () => {
            try {
                const mod = await importWithTimestamp('vue');
                ref = mod.ref;
                computed = mod.computed;
                console.log('[HMR] Módulo vue (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando vue', e);
                return false;
            }
        };
    window.__VERSA_HMR.modules['./local.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./local.js');
                localUtil = mod.localUtil;
                console.log('[HMR] Módulo ./local.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./local.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
const count = ref(0);
    const double = computed(() => count.value * 2);
    localUtil();
})();"
`;

exports[`transformModuleWithAcorn NO debería transformar imports si el archivo contiene "createApp" y debería añadir marca de recarga 1`] = `
"//versaHRM-reloadFILE
import { createApp } from 'vue';
import App from './App.vue';
import { router } from './router.js';

const app = createApp(App);
app.use(router);
app.mount('#app');"
`;

exports[`transformModuleWithAcorn NO debería transformar imports si el archivo contiene "mount" (y no createApp) y debería añadir marca de recarga 1`] = `
"//versaHRM-reloadFILE
import { h, render } from 'vue';
import App from './App.vue';

const vnode = h(App);
render(vnode, document.getElementById('#app'));
const someObject = { mount: () => {} };
someObject.mount();"
`;

exports[`transformModuleWithAcorn NO debería transformar un archivo que es principalmente imports/exports (CoreDefinitionFile) y debería añadir marca de recarga 1`] = `
"import { firstUtil } from './utils/first.js';
import { secondUtil } from './utils/second.js';
import { thirdUtil } from './utils/third.js';

(async () => {
const combined = () => firstUtil() + secondUtil();
    export { firstUtil, secondUtil, thirdUtil, combined };
    export const CONST_A = 123;
})();"
`;

exports[`transformModuleWithAcorn NO debería transformar un archivo que está justo por debajo del ratio de CoreDefinitionFile 1`] = `
"let utilOne;
let utilTwo;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        ({ utilOne } = await importWithTimestamp('./utils/utilOne.js'));
        ({ utilTwo } = await importWithTimestamp('./utils/utilTwo.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['./utils/utilOne.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./utils/utilOne.js');
                utilOne = mod.utilOne;
                console.log('[HMR] Módulo ./utils/utilOne.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./utils/utilOne.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.modules['./utils/utilTwo.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./utils/utilTwo.js');
                utilTwo = mod.utilTwo;
                console.log('[HMR] Módulo ./utils/utilTwo.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./utils/utilTwo.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
export { utilOne, utilTwo };
    function localLogic1() { /* ... */ }
    function localLogic2() { /* ... */ }
    const localValue = 123;
})();"
`;

exports[`transformModuleWithAcorn componente Vue con _resolveComponent: import resuelto no se transforma, otro .js local sí, sin marca de recarga 1`] = `
"import MyComponentImported from './MyComponentImported.js';

export default defineComponent({
  components: {
    'my-component': _resolveComponent("MyComponentImported")
  },
  setup() {
    anotherUtil(); // Se usa la utilidad local
    return {};
  }
});    let anotherUtil;
    let defineComponent;
    let _resolveComponent;
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    const load___anotherUtil_js_module = async () => {
    const mod = await importWithTimestamp('./anotherUtil.js');
    anotherUtil = mod.default;
    };
    const load_vue_module = async () => {
    const mod = await importWithTimestamp('vue');
    defineComponent = mod.defineComponent;
    _resolveComponent = mod._resolveComponent;
    };
    await load___anotherUtil_js_module();
    await load_vue_module();
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {}
    window.__VERSA_HMR.modules['./anotherUtil.js'] = async () => {
    try {
    await load___anotherUtil_js_module();
    console.log('[HMR] Módulo recargado: ./anotherUtil.js');
    return true;
    } catch (e) {
    console.error('[HMR] Falló recarga ./anotherUtil.js', e);
    return false;
    }
    };
    window.__VERSA_HMR.modules['vue'] = async () => {
    try {
    await load_vue_module();
    console.log('[HMR] Módulo recargado: vue');
    return true;
    } catch (e) {
    console.error('[HMR] Falló recarga vue', e);
    return false;
    }
    };"
`;

exports[`transformModuleWithAcorn componente Vue: imports .js locales se transforman, cuerpo fuera de IIFE, sin marca de recarga 1`] = `
"export default defineComponent({
  name: 'MiComponente',
  components: { UnComponenteHijo },
  setup() {
    const mensaje = ref("Hola");
    utilidadLocal(); // Se usa la utilidad local
    const renderHijo = () => h(UnComponenteHijo);
    return { mensaje, renderHijo };
  }
});    let ref;
    let defineComponent;
    let h;
    let utilidadLocal;
    let UnComponenteHijo;
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    const load___UnComponenteHijo_vue_module = async () => {
    const mod = await importWithTimestamp('./UnComponenteHijo.vue');
    UnComponenteHijo = mod.default;
    };
    const load_vue_module = async () => {
    const mod = await importWithTimestamp('vue');
    ref = mod.ref;
    defineComponent = mod.defineComponent;
    h = mod.h;
    };
    const load___utilidadLocal_js_module = async () => {
    const mod = await importWithTimestamp('./utilidadLocal.js');
    utilidadLocal = mod.utilidadLocal;
    };
    await load___UnComponenteHijo_vue_module();
    await load_vue_module();
    await load___utilidadLocal_js_module();
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {}
    window.__VERSA_HMR.modules['./UnComponenteHijo.vue'] = async () => {
    try {
    await load___UnComponenteHijo_vue_module();
    console.log('[HMR] Módulo recargado: ./UnComponenteHijo.vue');
    return true;
    } catch (e) {
    console.error('[HMR] Falló recarga ./UnComponenteHijo.vue', e);
    return false;
    }
    };
    window.__VERSA_HMR.modules['vue'] = async () => {
    try {
    await load_vue_module();
    console.log('[HMR] Módulo recargado: vue');
    return true;
    } catch (e) {
    console.error('[HMR] Falló recarga vue', e);
    return false;
    }
    };
    window.__VERSA_HMR.modules['./utilidadLocal.js'] = async () => {
    try {
    await load___utilidadLocal_js_module();
    console.log('[HMR] Módulo recargado: ./utilidadLocal.js');
    return true;
    } catch (e) {
    console.error('[HMR] Falló recarga ./utilidadLocal.js', e);
    return false;
    }
    };"
`;

exports[`transformModuleWithAcorn debería manejar re-exportaciones de librerías externas (manteniendo imports estáticos) 1`] = `
"(async () => {
export { ref, computed } from 'vue';
    export { default as anotherDefault } from './anotherDefault.js';
})();"
`;

exports[`transformModuleWithAcorn debería manejar re-exportaciones de módulos .js locales (considerándolos CoreDefinitionFile) 1`] = `
"(async () => {
export { default as myDefault } from './myDefaultExport.js';
    export * from './myNamespaceExports.js';
    export { namedExport, originalName as localReExport } from './myNamedExports.js';
})();"
`;

exports[`transformModuleWithAcorn debería manejar un archivo solo con exports 1`] = `
"(async () => {
export const message = "Hola";
    export function greet(name) {
      return \`Hola, \${name}\`;
    }
})();"
`;

exports[`transformModuleWithAcorn debería manejar un archivo solo con imports .js locales y sin exports 1`] = `
"let setup;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        ({ setup } = await importWithTimestamp('./setupModule.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['./setupModule.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./setupModule.js');
                setup = mod.setup;
                console.log('[HMR] Módulo ./setupModule.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./setupModule.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
setup();
    console.log('Módulo de solo imports ejecutado');
})();"
`;

exports[`transformModuleWithAcorn debería manejar un archivo vacío o solo con comentarios 1`] = `""`;

exports[`transformModuleWithAcorn debería manejar un archivo vacío o solo con comentarios 2`] = `""`;

exports[`transformModuleWithAcorn debería mover el cuerpo del código dentro del IIFE si hay imports dinámicos 1`] = `
"let $dom;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        ({ $dom } = await importWithTimestamp('./dom-utils.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['./dom-utils.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./dom-utils.js');
                $dom = mod.$dom;
                console.log('[HMR] Módulo ./dom-utils.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./dom-utils.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
const button = $dom('#myButton');
    button.addEventListener('click', () => {
        console.log('Button clicked!');
    });
    export const testVar = 123;
})();"
`;

exports[`transformModuleWithAcorn debería preservar comentarios en el código 1`] = `
"let myUtil;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        ({ myUtil } = await importWithTimestamp('./utils.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['./utils.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./utils.js');
                myUtil = mod.myUtil;
                console.log('[HMR] Módulo ./utils.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./utils.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
function doWork() {
        // Comentario dentro de una función
        myUtil();
    }
    export { doWork };
})();"
`;

exports[`transformModuleWithAcorn debería transformar diferentes tipos de imports .js locales 1`] = `
"let myDefault;
let allUtils;
let specificUtil;
let aliasUtil;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        myDefault = (await importWithTimestamp('./defaultUtil.js')).default;
        allUtils = await importWithTimestamp('./allUtils.js');
        ({ specificUtil, aliasUtil } = await importWithTimestamp('./specificUtils.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['./defaultUtil.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./defaultUtil.js');
                myDefault = mod.default;
                console.log('[HMR] Módulo ./defaultUtil.js (default) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./defaultUtil.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.modules['./allUtils.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./allUtils.js');
                allUtils = mod;
                console.log('[HMR] Módulo ./allUtils.js (namespace) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./allUtils.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.modules['./specificUtils.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./specificUtils.js');
                specificUtil = mod.specificUtil;
                aliasUtil = mod.originalName;
                console.log('[HMR] Módulo ./specificUtils.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./specificUtils.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
myDefault();
    allUtils.doSomething();
    specificUtil();
    aliasUtil();
})();"
`;

exports[`transformModuleWithAcorn debería transformar un import .js local a dinámico y añadir HMR 1`] = `
"let myUtil;

(async () => {
    const importWithTimestamp = path => { const url = \`\${path}?t=\${Date.now()}\`; return import(url); };
    try {
        ({ myUtil } = await importWithTimestamp('./utils.js'));
        console.log('[HMR] Módulos dinámicos cargados inicialmente');
    } catch (e) {
        console.error('[HMR] Error en carga inicial de módulos dinámicos', e);
    }
    window.__VERSA_HMR = window.__VERSA_HMR || {};
    window.__VERSA_HMR.modules = window.__VERSA_HMR.modules || {};
    window.__VERSA_HMR.modules['./utils.js'] = async () => {
            try {
                const mod = await importWithTimestamp('./utils.js');
                myUtil = mod.myUtil;
                console.log('[HMR] Módulo ./utils.js (named) recargado con éxito');
                return true;
            } catch (e) {
                console.error('[HMR] Error recargando ./utils.js', e);
                return false;
            }
        };
    window.__VERSA_HMR.reload = async () => { console.log("[HMR] Reload all invoked"); const P = Object.values(window.__VERSA_HMR.modules).map(f=>f()); await Promise.all(P); };
myUtil();
    console.log('Hola desde el módulo');
})();"
`;
