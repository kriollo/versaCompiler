/**
 * @fileoverview Inicializaci√≥n del sistema Hot Module Replacement (HMR) para VersaCompiler
 * Este archivo maneja la conexi√≥n con BrowserSync y configura los listeners para HMR de Vue
 */

/**
 * @typedef {Object} ComponentInfo
 * @property {string} normalizedPath - Ruta normalizada del componente
 * @property {string} nameFile - Nombre del archivo del componente
 */

import { hideErrorOverlay, showErrorOverlay } from './errorScreen.js';
import { obtenerInstanciaVue } from './getInstanciaVue.js';
import { reloadComponent } from './VueHRM.js';

/**
 * Inicializa la conexi√≥n socket con BrowserSync y configura los listeners para HMR
 * @param {number} [retries=0] - N√∫mero de reintentos realizados
 * @returns {Promise<void>} Promise que se resuelve cuando la conexi√≥n est√° configurada
 */
async function initSocket(retries = 0) {
    const maxRetries = 10;
    const retryDelay = Math.min(2000 * (retries + 1), 10000); // Backoff exponencial hasta 10s

    // Verificar si BrowserSync est√° disponible y tiene socket
    if (window.___browserSync___ && window.___browserSync___.socket) {
        const socket = window.___browserSync___.socket;
        let connected = socket.connected; // Verificar estado inicial de conexi√≥n

        // Limpiar listeners previos para evitar duplicados
        socket.off('connect');
        socket.off('disconnect');
        socket.off('reloadFull');
        socket.off('HRMVue');
        socket.off('HRMHelper');
        socket.off('error');

        // Configurar listener para eventos de conexi√≥n
        socket.on('connect', async () => {
            connected = true;
            hideErrorOverlay();
            console.log('‚úîÔ∏è Versa HMR: Socket conectado');
        });

        // Configurar listener para eventos de desconexi√≥n
        socket.on('disconnect', () => {
            connected = false;
            console.log('‚ùå Versa HMR: Socket desconectado, reintentando...');
            // L√≥gica de reintentos para desconexi√≥n
            setTimeout(() => {
                if (!socket.connected && retries < maxRetries) {
                    initSocket(retries + 1);
                } else if (!socket.connected) {
                    console.error(
                        `‚ùå Versa HMR: Socket no conectado despu√©s de ${maxRetries} reintentos tras desconexi√≥n.`,
                    );
                    showErrorOverlay(
                        'HMR Desconectado',
                        'No se pudo reconectar a BrowserSync despu√©s de m√∫ltiples reintentos.',
                    );
                }
            }, retryDelay);
        });

        // Configurar listener para recarga completa
        socket.on('reloadFull', () => window.location.reload()); // Obtener la instancia de Vue con toda la l√≥gica integrada
        let vueInstance = await obtenerInstanciaVue();

        // Configurar listener para HMR de componentes Vue
        socket.on('HRMVue', async (/** @type {ComponentInfo} */ data) => {
            hideErrorOverlay();
            vueInstance = window.__VUE_APP__ || vueInstance;
            if (vueInstance) {
                console.log('üî• Preparando HMR para Vue...');
                await reloadComponent(vueInstance, data);
            } else {
                console.log('üîÑ Usando m√©todo fallback:', vueInstance);
            }
        });

        // Configurar listener para datos auxiliares de HMR
        socket.on('HRMHelper', data => {
            //TODO: Implementar l√≥gica de HMRHelper
            window.location.reload();
            console.log('üîÑ Recargando p√°gina por HMRHelper:', data);
        });

        // Configurar listener para errores de socket
        socket.on('error', err => {
            console.error('‚ùå Versa HMR: Error en el socket:', err);
            showErrorOverlay(
                'Error de Socket',
                'Se produjo un error en la conexi√≥n de BrowserSync.',
            );
        }); // Watchdog para verificar conexi√≥n inicial si el socket existe pero no est√° conectado
        if (!connected) {
            console.log(
                `Versa HMR: Objeto socket encontrado, intentando conexi√≥n (Intento ${
                    retries + 1
                }/${maxRetries})`,
            );
            setTimeout(() => {
                if (!socket.connected && retries <= maxRetries) {
                    console.warn(
                        'Versa HMR: Sin conexi√≥n de socket despu√©s del tiempo de espera inicial, reintentando initSocket...',
                    );
                    initSocket(retries + 1);
                } else if (!socket.connected) {
                    console.error(
                        `‚ùå Versa HMR: Socket a√∫n no conectado despu√©s de ${maxRetries} intentos iniciales.`,
                    );
                    showErrorOverlay(
                        'Fall√≥ HMR de BrowserSync',
                        'No se pudo conectar al socket de BrowserSync despu√©s de intentos iniciales.',
                    );
                }
            }, 5000); // Timeout de 5s para el watchdog inicial
        }
    } else {
        // BrowserSync no est√° disponible, intentar reinicializar
        console.warn(
            `[HMR] Socket de BrowserSync no encontrado o BrowserSync no completamente inicializado. Reintentando initSocket... (${
                retries + 1
            }/${maxRetries})`,
        );
        if (retries < maxRetries) {
            setTimeout(() => initSocket(retries + 1), retryDelay);
        } else {
            console.error(
                `‚ùå Versa HMR: Socket de BrowserSync no encontrado despu√©s de ${maxRetries} reintentos.`,
            );
            showErrorOverlay(
                'Fall√≥ HMR de BrowserSync',
                'Socket o cliente de BrowserSync no encontrado despu√©s de m√∫ltiples reintentos.',
            );
        }
    }
}

// Inicializar el sistema HMR al cargar el script
initSocket();
