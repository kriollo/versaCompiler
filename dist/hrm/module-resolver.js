/**
 * DYNAMIC MODULE RESOLVER v2.0 - SISTEMA ABSOLUTAMENTE DIN√ÅMICO
 *
 * Sistema que usa APIs del servidor para resolver CUALQUIER dependencia npm autom√°ticamente.
 * Funciona con TODOS los m√≥dulos npm sin configuraci√≥n previa ni listas predefinidas.
 * Inspirado en Vite pero mejorado para trabajar con resoluci√≥n server-side.
 */

class AbsolutelyDynamicModuleResolver {
    constructor(options = {}) {
        this.resolvedModules = new Map();
        this.availableDependencies = new Set();
        this.cache = new Map(); // Cach√© inteligente para m√≥dulos ya resueltos
        this.pendingResolutions = new Map(); // Evitar resoluciones duplicadas
        this.isInitialized = false;

        // Configuraci√≥n de cach√©
        this.cacheExpiration = 5 * 60 * 1000; // 5 minutos
        this.maxCacheSize = 100;

        // **NUEVA OPCI√ìN**: Modo optimizado que solo incluye dependencias usadas
        this.optimizedMode = options.optimizedMode || false;

        console.log(
            `üöÄ Iniciando Absolutely Dynamic Module Resolver v2.0${this.optimizedMode ? ' (Modo Optimizado)' : ''}...`,
        );
        this.init();
    }

    /**
     * Inicializaci√≥n del sistema completamente din√°mico
     */
    async init() {
        try {
            console.log('üîß Cargando dependencias desde el servidor...');
            await this.loadDependenciesFromServer();

            console.log('üì¶ Resolviendo m√≥dulos autom√°ticamente...');
            await this.resolveAllAvailableModules();

            console.log('üéØ Aplicando import map din√°mico...');
            this.applyImportMap();

            this.isInitialized = true;
            console.log(
                '‚úÖ Sistema absolutamente din√°mico inicializado correctamente',
            );
        } catch (error) {
            console.error(
                '‚ùå Error al inicializar el sistema din√°mico:',
                error,
            );
            this.handleInitializationError(error);
        }
    } /**
     * Cargar dependencias desde el servidor (todas o solo las usadas)
     */
    async loadDependenciesFromServer() {
        try {
            // **NUEVA FUNCIONALIDAD**: Elegir endpoint seg√∫n el modo
            const endpoint = this.optimizedMode
                ? '/api/dependencies/used'
                : '/api/dependencies';

            const response = await fetch(endpoint);

            if (!response.ok) {
                throw new Error(
                    `Error del servidor: ${response.status} ${response.statusText}`,
                );
            }

            const data = await response.json();

            if (data.success) {
                if (this.optimizedMode && data.usedDependencies) {
                    // Modo optimizado: solo dependencias realmente usadas
                    data.usedDependencies.forEach(dep => {
                        this.availableDependencies.add(dep.name);
                    });

                    console.log(
                        `üìã ${this.availableDependencies.size} dependencias USADAS detectadas autom√°ticamente:`,
                    );
                    console.log(
                        'üéØ M√≥dulos optimizados:',
                        Array.from(this.availableDependencies),
                    );

                    // Mostrar informaci√≥n detallada de an√°lisis
                    console.log(
                        `üìÅ ${data.analyzedFiles || 0} archivos analizados en src/`,
                    );
                    if (data.usedDependencies.length > 0) {
                        console.log('üìä Detalle de uso por m√≥dulo:');
                        data.usedDependencies.forEach(dep => {
                            console.log(
                                `  - ${dep.name}@${dep.version}: usado en ${dep.files.length} archivo(s)`,
                            );
                        });
                    }

                    return data.usedDependencies.reduce((acc, dep) => {
                        acc[dep.name] = dep.version;
                        return acc;
                    }, {});
                } else if (!this.optimizedMode && data.dependencies) {
                    // Modo normal: todas las dependencias de package.json
                    Object.keys(data.dependencies).forEach(dep => {
                        this.availableDependencies.add(dep);
                    });

                    console.log(
                        `üìã ${this.availableDependencies.size} dependencias detectadas autom√°ticamente:`,
                    );
                    console.log(
                        'üîç M√≥dulos disponibles:',
                        Array.from(this.availableDependencies),
                    );

                    return data.dependencies;
                } else {
                    throw new Error('Respuesta inv√°lida del servidor');
                }
            } else {
                throw new Error(
                    data.error || 'Respuesta inv√°lida del servidor',
                );
            }
        } catch (error) {
            console.warn(
                '‚ö†Ô∏è Error al cargar dependencias del servidor:',
                error.message,
            );
            console.log('üîÑ Usando modo fallback...');
            this.enableFallbackMode();
            return {};
        }
    }

    /**
     * Resolver TODOS los m√≥dulos disponibles autom√°ticamente
     */
    async resolveAllAvailableModules() {
        if (this.availableDependencies.size === 0) {
            console.warn('‚ö†Ô∏è No hay dependencias para resolver');
            return;
        }

        const resolutionPromises = Array.from(this.availableDependencies).map(
            moduleName => this.resolveModule(moduleName, false), // false = no aplicar import map a√∫n
        );

        const results = await Promise.allSettled(resolutionPromises);

        let resolvedCount = 0;
        let failedCount = 0;

        results.forEach((result, index) => {
            const moduleName = Array.from(this.availableDependencies)[index];
            if (result.status === 'fulfilled' && result.value) {
                resolvedCount++;
                console.log(`‚úÖ ${moduleName} -> ${result.value}`);
            } else {
                failedCount++;
                console.debug(`‚ùå No se pudo resolver: ${moduleName}`);
            }
        });

        console.log(
            `üìä Resoluci√≥n completada: ${resolvedCount} exitosos, ${failedCount} fallidos`,
        );
    }

    /**
     * Resolver un m√≥dulo espec√≠fico usando la API del servidor
     */
    async resolveModule(moduleName, applyImportMap = true) {
        // Verificar cach√© primero
        if (this.cache.has(moduleName)) {
            const cached = this.cache.get(moduleName);
            if (Date.now() - cached.timestamp < this.cacheExpiration) {
                console.log(`üíæ Usando cach√© para: ${moduleName}`);
                if (cached.path) {
                    this.resolvedModules.set(moduleName, cached.path);
                    if (applyImportMap) {
                        this.applyImportMap();
                    }
                }
                return cached.path;
            } else {
                // Cach√© expirado
                this.cache.delete(moduleName);
            }
        }

        // Evitar resoluciones duplicadas
        if (this.pendingResolutions.has(moduleName)) {
            return this.pendingResolutions.get(moduleName);
        }

        const resolutionPromise = this.performModuleResolution(
            moduleName,
            applyImportMap,
        );
        this.pendingResolutions.set(moduleName, resolutionPromise);

        try {
            const result = await resolutionPromise;
            return result;
        } finally {
            this.pendingResolutions.delete(moduleName);
        }
    }

    /**
     * Realizar la resoluci√≥n real del m√≥dulo usando la API del servidor
     */
    async performModuleResolution(moduleName, applyImportMap) {
        try {
            const response = await fetch(
                `/api/resolve/${encodeURIComponent(moduleName)}`,
            );

            if (!response.ok) {
                throw new Error(
                    `HTTP ${response.status}: ${response.statusText}`,
                );
            }

            const data = await response.json();

            if (data.success && data.path) {
                // Guardar en cach√©
                this.updateCache(moduleName, data.path);

                // Agregar al mapa de m√≥dulos resueltos
                this.resolvedModules.set(moduleName, data.path);

                if (applyImportMap) {
                    this.applyImportMap();
                }

                return data.path;
            } else {
                console.debug(
                    `‚ùå No se pudo resolver: ${moduleName} - ${data.error || 'Error desconocido'}`,
                );
                this.updateCache(moduleName, null); // Cachear fallos temporalmente
                return null;
            }
        } catch (error) {
            console.debug(`‚ùå Error al resolver ${moduleName}:`, error.message);
            this.updateCache(moduleName, null);
            return null;
        }
    }

    /**
     * Actualizar cach√© inteligente
     */
    updateCache(moduleName, path) {
        // Limpiar cach√© si est√° lleno
        if (this.cache.size >= this.maxCacheSize) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }

        this.cache.set(moduleName, {
            path,
            timestamp: Date.now(),
        });
    }

    /**
     * Crear import map din√°mico optimizado
     */
    createImportMap() {
        const imports = {};

        for (const [name, path] of this.resolvedModules) {
            imports[name] = path;
        }

        return { imports };
    }

    /**
     * Aplicar import map al DOM de forma inteligente
     */
    applyImportMap() {
        if (this.resolvedModules.size === 0) {
            console.debug('üìù No hay m√≥dulos resueltos para el import map');
            return;
        }

        // Remover import map existente
        const existingImportMap = document.querySelector(
            'script[type="importmap"]',
        );
        if (existingImportMap) {
            existingImportMap.remove();
        }

        // Crear nuevo import map
        const importMapScript = document.createElement('script');
        importMapScript.type = 'importmap';
        importMapScript.textContent = JSON.stringify(
            this.createImportMap(),
            null,
            2,
        );

        // Insertar en la posici√≥n correcta
        const firstModuleScript = document.querySelector(
            'script[type="module"]',
        );
        if (firstModuleScript) {
            firstModuleScript.parentNode.insertBefore(
                importMapScript,
                firstModuleScript,
            );
        } else {
            document.head.appendChild(importMapScript);
        }

        console.log(
            `üéØ Import map actualizado con ${this.resolvedModules.size} m√≥dulos:`,
            this.createImportMap(),
        );
    }

    /**
     * Resolver m√≥dulo bajo demanda (on-demand)
     */
    async resolveOnDemand(moduleName) {
        if (!this.isInitialized) {
            console.warn(
                `‚ö†Ô∏è Sistema no inicializado, intentando resolver: ${moduleName}`,
            );
        }

        if (this.resolvedModules.has(moduleName)) {
            console.log(`‚úÖ M√≥dulo ya resuelto: ${moduleName}`);
            return this.resolvedModules.get(moduleName);
        }

        console.log(`üîç Resolviendo bajo demanda: ${moduleName}`);
        const path = await this.resolveModule(moduleName, true);

        if (path) {
            console.log(
                `‚úÖ M√≥dulo resuelto bajo demanda: ${moduleName} -> ${path}`,
            );
        } else {
            console.error(`‚ùå No se pudo resolver bajo demanda: ${moduleName}`);
        }

        return path;
    }

    /**
     * Modo fallback para casos de error
     */
    enableFallbackMode() {
        console.log('üîÑ Activando modo fallback...');

        // M√≥dulos comunes como fallback
        const fallbackModules = [
            'vue',
            'react',
            'react-dom',
            'lodash',
            'axios',
            'moment',
            'dayjs',
            'uuid',
            'classnames',
            'clsx',
            'date-fns',
            '@vue/reactivity',
            '@vue/runtime-core',
            'pinia',
            'typescript',
            'code-tag',
            'chalk',
        ];

        fallbackModules.forEach(module => {
            this.availableDependencies.add(module);
        });
    }

    /**
     * Manejar errores de inicializaci√≥n
     */
    handleInitializationError(error) {
        console.error('‚ùå Error cr√≠tico en la inicializaci√≥n:', error);
        console.log('üîÑ Intentando modo de recuperaci√≥n...');

        // Modo de recuperaci√≥n b√°sico
        this.enableFallbackMode();
        this.resolveAllAvailableModules();
        this.applyImportMap();
    }

    /**
     * Agregar m√≥dulo manualmente (API p√∫blica)
     */
    addModule(name, path) {
        this.resolvedModules.set(name, path);
        this.updateCache(name, path);
        this.applyImportMap();
        console.log(`‚ûï M√≥dulo agregado manualmente: ${name} -> ${path}`);
    }

    /**
     * Obtener estad√≠sticas del sistema
     */
    getStats() {
        return {
            initialized: this.isInitialized,
            resolvedModules: this.resolvedModules.size,
            availableDependencies: this.availableDependencies.size,
            cacheSize: this.cache.size,
            modules: Array.from(this.resolvedModules.keys()),
            dependencies: Array.from(this.availableDependencies),
            cache: Array.from(this.cache.keys()),
        };
    }

    /**
     * Limpiar cach√©
     */
    clearCache() {
        this.cache.clear();
        console.log('üßπ Cach√© limpiado');
    }

    /**
     * Refrescar sistema completo
     */
    async refresh() {
        console.log('üîÑ Refrescando sistema completo...');

        // Limpiar estado
        this.resolvedModules.clear();
        this.availableDependencies.clear();
        this.clearCache();
        this.isInitialized = false;

        // Reinicializar
        await this.init();
    }
}
// Inicializar autom√°ticamente cuando se carga la p√°gina
let moduleResolver;

// API Global para crear resolver optimizado
window.createOptimizedResolver = function () {
    return new AbsolutelyDynamicModuleResolver({ optimizedMode: true });
};

// API Global para comparar rendimiento
window.compareResolvers = async function () {
    console.log('üîç Iniciando comparaci√≥n de resolvers...');

    const normalResolver = new AbsolutelyDynamicModuleResolver({
        optimizedMode: false,
    });
    const optimizedResolver = new AbsolutelyDynamicModuleResolver({
        optimizedMode: true,
    });

    // Esperar a que ambos se inicialicen
    await Promise.all([
        new Promise(resolve => {
            const checkNormal = setInterval(() => {
                if (normalResolver.isInitialized) {
                    clearInterval(checkNormal);
                    resolve();
                }
            }, 100);
        }),
        new Promise(resolve => {
            const checkOptimized = setInterval(() => {
                if (optimizedResolver.isInitialized) {
                    clearInterval(checkOptimized);
                    resolve();
                }
            }, 100);
        }),
    ]);

    const normalStats = normalResolver.getStats();
    const optimizedStats = optimizedResolver.getStats();

    console.log('üìä Comparaci√≥n de Resolvers:');
    console.log('üîπ Normal (todas las deps):', normalStats);
    console.log('üî∏ Optimizado (solo usadas):', optimizedStats);

    const reduction = Math.round(
        ((normalStats.totalModules - optimizedStats.totalModules) /
            normalStats.totalModules) *
            100,
    );
    console.log(
        `üéØ Reducci√≥n de m√≥dulos: ${reduction}% (de ${normalStats.totalModules} a ${optimizedStats.totalModules})`,
    );

    return {
        normal: normalStats,
        optimized: optimizedStats,
        reduction: reduction,
    };
};

// API Global para acceso desde cualquier lugar
window.resolveModule = async function (moduleName) {
    if (!moduleResolver) {
        console.warn('‚ö†Ô∏è Module Resolver no inicializado, esperando...');
        await new Promise(resolve => {
            const checkInterval = setInterval(() => {
                if (moduleResolver && moduleResolver.isInitialized) {
                    clearInterval(checkInterval);
                    resolve();
                }
            }, 100);
        });
    }

    return await moduleResolver.resolveOnDemand(moduleName);
};

// API Global para obtener estad√≠sticas
window.getModuleStats = function () {
    return moduleResolver
        ? moduleResolver.getStats()
        : { error: 'Resolver no inicializado' };
};

// API Global para refrescar el sistema
window.refreshModuleResolver = async function () {
    if (moduleResolver) {
        await moduleResolver.refresh();
    } else {
        console.warn('‚ö†Ô∏è Module Resolver no inicializado');
    }
};

// Inicializaci√≥n autom√°tica
function initializeModuleResolver() {
    if (!moduleResolver) {
        moduleResolver = new AbsolutelyDynamicModuleResolver();
        window.moduleResolver = moduleResolver;

        // Exponer m√©todos √∫tiles
        window.addModule = (name, path) => moduleResolver.addModule(name, path);
        window.clearModuleCache = () => moduleResolver.clearCache();

        console.log(
            'üåü Absolutely Dynamic Module Resolver v2.0 inicializado globalmente',
        );
    }
}

// Inicializar seg√∫n el estado del DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeModuleResolver);
} else {
    initializeModuleResolver();
}

// Interceptor para imports fallidos (experimental)
window.addEventListener('error', event => {
    if (
        event.message &&
        event.message.includes('Failed to resolve module specifier')
    ) {
        const moduleMatch = event.message.match(/"([^"]+)"/);
        if (moduleMatch && moduleResolver) {
            const moduleName = moduleMatch[1];
            console.log(`üîç Intentando resolver m√≥dulo fallido: ${moduleName}`);
            moduleResolver.resolveOnDemand(moduleName);
        }
    }
});

console.log('üöÄ Absolutely Dynamic Module Resolver v2.0 cargado y listo');
