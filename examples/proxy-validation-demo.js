#!/usr/bin/env node

/**
 * Demo script para probar la validaci√≥n de proxy de BrowserSync
 *
 * Este script simula diferentes escenarios de configuraci√≥n de proxy
 * para demostrar c√≥mo funciona la validaci√≥n integrada.
 */

import {
    getProxyInfo,
    validateProxyAvailability,
} from '../src/utils/proxyValidator.ts';

const chalk = (await import('chalk')).default;

async function demoProxyValidation() {
    console.log(chalk.blue('üîç Demo de Validaci√≥n de Proxy - VersaCompiler\n'));

    const testCases = [
        {
            name: 'Servidor local no disponible',
            url: 'http://localhost:8080',
            description: 'Simula un servidor local que no est√° ejecut√°ndose',
        },
        {
            name: 'Servidor externo disponible',
            url: 'https://httpbin.org',
            description: 'Servidor de pruebas HTTP disponible',
        },
        {
            name: 'URL inv√°lida',
            url: 'invalid-url-format',
            description: 'URL con formato inv√°lido',
        },
    ];

    for (const testCase of testCases) {
        console.log(chalk.yellow(`\nüìã Caso de prueba: ${testCase.name}`));
        console.log(chalk.gray(`   Descripci√≥n: ${testCase.description}`));
        console.log(chalk.gray(`   URL: ${testCase.url}`));

        console.log(chalk.cyan('   üîç Validando disponibilidad...'));

        const startTime = Date.now();
        const isAvailable = await validateProxyAvailability(testCase.url, 5000);
        const endTime = Date.now();

        if (isAvailable) {
            console.log(
                chalk.green(
                    `   ‚úÖ Servidor disponible (${endTime - startTime}ms)`,
                ),
            );
        } else {
            console.log(
                chalk.red(
                    `   ‚ùå Servidor no disponible (${endTime - startTime}ms)`,
                ),
            );

            const proxyInfo = getProxyInfo(testCase.url);
            console.log(chalk.red(`   üìç Host: ${proxyInfo.host}`));
            console.log(chalk.red(`   üîå Puerto: ${proxyInfo.port}`));
            console.log(chalk.red(`   üîí Protocolo: ${proxyInfo.protocol}`));

            // Simular la pregunta al usuario (sin esperar respuesta real)
            console.log(
                chalk.yellow(
                    '\n   ‚ùì En el flujo real, aqu√≠ se preguntar√≠a al usuario:',
                ),
            );
            console.log(
                chalk.gray(
                    '   "¬øDesea continuar de todos modos? El modo proxy podr√≠a no funcionar correctamente. (s/n):"',
                ),
            );
        }

        console.log(chalk.white('   ‚îÄ'.repeat(60)));
    }

    console.log(chalk.green('\nüéâ Demo completado exitosamente!'));
    console.log(chalk.blue('\nüìù Resumen de la funcionalidad:'));
    console.log(
        chalk.white(
            '   ‚Ä¢ Valida la disponibilidad del servidor proxy antes de iniciar BrowserSync',
        ),
    );
    console.log(
        chalk.white(
            '   ‚Ä¢ Extrae informaci√≥n legible del proxy para mostrar al usuario',
        ),
    );
    console.log(
        chalk.white(
            '   ‚Ä¢ Permite al usuario decidir si continuar cuando el proxy no est√° disponible',
        ),
    );
    console.log(
        chalk.white('   ‚Ä¢ Integrado en el flujo de browserSyncServer()'),
    );
}

// Ejecutar demo
demoProxyValidation().catch(console.error);
